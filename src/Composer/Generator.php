<?php

declare(strict_types=1);

namespace WoLfulus\Extras\Composer;

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Dumper;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\Printer;
use WoLfulus\Extras\Contracts\Package;
use WoLfulus\Extras\Contracts\Repository;

/**
 * Class Generator.
 */
class Generator
{
    /**
     * @var string
     */
    private $namespace = '';

    /**
     * @var string
     */
    private $class = '';

    /**
     * @var string
     */
    private $key = '';

    /**
     * @var string
     */
    private $package = '';

    /**
     * @var array<string>
     */
    private $packages = [];

    /**
     * @var null|string
     */
    private $root;

    /**
     * Sets the originating package.
     */
    public function package(string $package): self
    {
        $this->package = $package;

        return $this;
    }

    /**
     * Sets the extra key.
     */
    public function pattern(string $key): self
    {
        $this->key = $key;

        return $this;
    }

    /**
     * Sets the class name.
     */
    public function className(string $class): self
    {
        $exploded = explode('\\', $class);
        $this->class = (string) array_pop($exploded);
        $this->namespace = implode('\\', $exploded);

        return $this;
    }

    /**
     * Gets the unique hash id for the package/key pair.
     */
    public function hash(): string
    {
        return sha1("{$this->package}:{$this->key}");
    }

    /**
     * Adds a package to the list.
     *
     * @param mixed $value
     *
     * @return Generator
     */
    public function addPackage(string $package, string $version, bool $root, $value): self
    {
        $code = (new Dumper())->format('new \\WoLfulus\\Extras\\Package(?, ?, ?, ?)', $package, $version, $root, $value);
        $this->packages[] = $code;
        if ($root) {
            $this->root = $code;
        }

        return $this;
    }

    /**
     * Generates the class code.
     */
    public function generate(): string
    {
        $file = $this->createFile();

        $printer = new Printer();
        $printer->setTypeResolving(false);

        return $printer->printFile($file);
    }

    /**
     * Adds the file header.
     */
    private function createFile(): PhpFile
    {
        $file = new PhpFile();

        $file->addComment('This file was auto generated by package wolfulus/extras.')
            ->addComment('https://github.com/WoLfulus/extras')
            ->addComment('')
            ->addComment("The package that requested the generation of this file is \"{$this->package}\"")
            ->setStrictTypes()
        ;

        $this->addClass($file);

        return $file;
    }

    /**
     * Adds the file class.
     */
    private function addClass(PhpFile $file): void
    {
        $cls = $this->namespace !== '' ?
            $file->addNamespace($this->namespace)->addClass($this->class) :
            $file->addClass($this->class);

        $cls->addImplement('\\'.Repository::class)->addComment($this->class.' class.');
        $cls->addProperty('packages')->setProtected()->setNullable()->setStatic()->setInitialized()
            ->addComment('@var null|array<\\'.Package::class.">\n")
        ;

        if ($this->root !== null) {
            $cls->addProperty('root')->setProtected()->setNullable()->setStatic()->setInitialized()
                ->addComment('@var \\'.Package::class."\n")
            ;
        }

        $this->addMethods($cls);
    }

    /**
     * Adds the methods to the class.
     */
    private function addMethods(ClassType $cls): void
    {
        $packageList = "\t".implode(",\n\t", $this->packages);
        $get = $cls->addMethod('get')->setPublic()->setStatic();
        $get->setReturnType('array')
            ->addComment("Gets all packages with an extra matching '{$this->key}' key.\n")
            ->addComment('@return array<\\WoLfulus\\Extras\\Contracts\\Package>')
        ;
        $get->addBody("return self::\$packages = self::\$packages ?? [\n{$packageList}\n];\n");
        $rootMethod = $cls->addMethod('root')->setPublic()->setStatic();
        $rootMethod->setReturnType('\\'.Package::class)->setReturnNullable()->addComment('Gets the root package data.');
        if ($this->root === null) {
            $rootMethod->addBody('return null;');

            return;
        }
        $rootMethod->addBody("return self::\$root = self::\$root ?? {$this->root};");
    }
}
